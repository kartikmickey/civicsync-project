{"ast":null,"code":"// utils/api.js\nimport { API_URL } from './constants';\nimport { getAuthHeaders } from './helpers';\n\n// Authentication APIs\nexport const authAPI = {\n  login: async credentials => {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    return response;\n  },\n  register: async userData => {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    return response;\n  },\n  getMe: async () => {\n    const response = await fetch(`${API_URL}/auth/me`, {\n      headers: getAuthHeaders()\n    });\n    return response;\n  }\n};\n\n// Issues APIs\nexport const issuesAPI = {\n  getAll: async params => {\n    const queryString = new URLSearchParams(params).toString();\n    const response = await fetch(`${API_URL}/issues?${queryString}`, {\n      headers: getAuthHeaders()\n    });\n    return response;\n  },\n  getMy: async () => {\n    const response = await fetch(`${API_URL}/issues/my`, {\n      headers: getAuthHeaders()\n    });\n    return response;\n  },\n  getById: async id => {\n    const response = await fetch(`${API_URL}/issues/${id}`, {\n      headers: getAuthHeaders()\n    });\n    return response;\n  },\n  create: async formData => {\n    const response = await fetch(`${API_URL}/issues`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: formData\n    });\n    return response;\n  },\n  update: async (id, formData) => {\n    const response = await fetch(`${API_URL}/issues/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: formData\n    });\n    return response;\n  },\n  delete: async id => {\n    const response = await fetch(`${API_URL}/issues/${id}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders()\n    });\n    return response;\n  },\n  vote: async id => {\n    const response = await fetch(`${API_URL}/issues/${id}/vote`, {\n      method: 'POST',\n      headers: getAuthHeaders()\n    });\n    return response;\n  },\n  updateStatus: async (id, status) => {\n    const response = await fetch(`${API_URL}/issues/${id}/status`, {\n      method: 'PATCH',\n      headers: {\n        ...getAuthHeaders(),\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status\n      })\n    });\n    return response;\n  }\n};\n\n// Analytics API\nexport const analyticsAPI = {\n  get: async () => {\n    const response = await fetch(`${API_URL}/analytics`, {\n      headers: getAuthHeaders()\n    });\n    return response;\n  }\n};","map":{"version":3,"names":["API_URL","getAuthHeaders","authAPI","login","credentials","response","fetch","method","headers","body","JSON","stringify","register","userData","getMe","issuesAPI","getAll","params","queryString","URLSearchParams","toString","getMy","getById","id","create","formData","localStorage","getItem","update","delete","vote","updateStatus","status","analyticsAPI","get"],"sources":["/Users/karthikjain/civicsync-project/frontend/src/utils/api.js"],"sourcesContent":["// utils/api.js\nimport { API_URL } from './constants';\nimport { getAuthHeaders } from './helpers';\n\n// Authentication APIs\nexport const authAPI = {\n  login: async (credentials) => {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(credentials)\n    });\n    return response;\n  },\n\n  register: async (userData) => {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(userData)\n    });\n    return response;\n  },\n\n  getMe: async () => {\n    const response = await fetch(`${API_URL}/auth/me`, {\n      headers: getAuthHeaders()\n    });\n    return response;\n  }\n};\n\n// Issues APIs\nexport const issuesAPI = {\n  getAll: async (params) => {\n    const queryString = new URLSearchParams(params).toString();\n    const response = await fetch(`${API_URL}/issues?${queryString}`, {\n      headers: getAuthHeaders()\n    });\n    return response;\n  },\n\n  getMy: async () => {\n    const response = await fetch(`${API_URL}/issues/my`, {\n      headers: getAuthHeaders()\n    });\n    return response;\n  },\n\n  getById: async (id) => {\n    const response = await fetch(`${API_URL}/issues/${id}`, {\n      headers: getAuthHeaders()\n    });\n    return response;\n  },\n\n  create: async (formData) => {\n    const response = await fetch(`${API_URL}/issues`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: formData\n    });\n    return response;\n  },\n\n  update: async (id, formData) => {\n    const response = await fetch(`${API_URL}/issues/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: formData\n    });\n    return response;\n  },\n\n  delete: async (id) => {\n    const response = await fetch(`${API_URL}/issues/${id}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders()\n    });\n    return response;\n  },\n\n  vote: async (id) => {\n    const response = await fetch(`${API_URL}/issues/${id}/vote`, {\n      method: 'POST',\n      headers: getAuthHeaders()\n    });\n    return response;\n  },\n\n  updateStatus: async (id, status) => {\n    const response = await fetch(`${API_URL}/issues/${id}/status`, {\n      method: 'PATCH',\n      headers: {\n        ...getAuthHeaders(),\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ status })\n    });\n    return response;\n  }\n};\n\n// Analytics API\nexport const analyticsAPI = {\n  get: async () => {\n    const response = await fetch(`${API_URL}/analytics`, {\n      headers: getAuthHeaders()\n    });\n    return response;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}